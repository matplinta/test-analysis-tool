# Generated by Django 4.0.3 on 2022-04-25 16:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Branches',
            },
        ),
        migrations.CreateModel(
            name='EnvIssueType',
            fields=[
                ('name', models.CharField(max_length=200, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FailMessageType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='Shortened name of failure message', max_length=300)),
                ('regex', models.TextField(help_text='Failure message regex', max_length=500, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description', max_length=500)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('env_issue_type', models.ForeignKey(blank=True, help_text='Environment issue type to set during analysis', on_delete=django.db.models.deletion.CASCADE, to='tra.envissuetype')),
            ],
        ),
        migrations.CreateModel(
            name='FailMessageTypeGroup',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='Name of failure message group', max_length=300)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('fail_message_types', models.ManyToManyField(to='tra.failmessagetype')),
            ],
        ),
        migrations.CreateModel(
            name='FeatureBuild',
            fields=[
                ('name', models.CharField(help_text='Feature Build name', max_length=20, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(help_text='Start time of the feature build', verbose_name='Start')),
                ('end_time', models.DateTimeField(help_text='End time of the feature build', verbose_name='End')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestInstance',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('test_case_name', models.CharField(help_text='Testcase name', max_length=200, null=True)),
                ('execution_suspended', models.BooleanField(blank=True, default=False, help_text='Execution suspended status', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestlineType',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestRunResult',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestSet',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='QC Test Set', max_length=300, null=True)),
                ('test_lab_path', models.TextField(help_text='Test Lab Path', max_length=300, null=True)),
                ('branch', models.ForeignKey(blank=True, help_text='Branch, field set automatically', on_delete=django.db.models.deletion.CASCADE, to='tra.branch')),
            ],
        ),
        migrations.CreateModel(
            name='TestRun',
            fields=[
                ('id', models.BigAutoField(help_text='Internal TRA TestRun id', primary_key=True, serialize=False)),
                ('rp_id', models.BigIntegerField(help_text='Reporting Portal TestRun id', null=True)),
                ('fail_message', models.TextField(blank=True, help_text='Fail message', max_length=1000, null=True)),
                ('comment', models.TextField(blank=True, help_text='Comment', max_length=1000, null=True)),
                ('test_line', models.TextField(blank=True, help_text='Testline', max_length=100, null=True)),
                ('test_suite', models.TextField(help_text='Testsuite name', max_length=200, null=True)),
                ('builds', models.TextField(help_text='Builds', max_length=100, null=True)),
                ('ute_exec_url', models.TextField(blank=True, help_text='URL of ute execution details', max_length=1000, null=True)),
                ('log_file_url', models.TextField(blank=True, help_text='UTE Cloud log file url', max_length=1000, null=True)),
                ('log_file_url_ext', models.TextField(blank=True, help_text='External log file url', max_length=1000, null=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time of testrun', verbose_name='Start')),
                ('end_time', models.DateTimeField(blank=True, help_text='End time of testrun', verbose_name='End')),
                ('analyzed', models.BooleanField(blank=True, default=False, help_text='Was test run analyzed in TRA', null=True)),
                ('analyzed_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('env_issue_type', models.ForeignKey(blank=True, help_text='Env issue type', on_delete=django.db.models.deletion.CASCADE, to='tra.envissuetype')),
                ('fb', models.ForeignKey(blank=True, help_text='Feature Build', on_delete=django.db.models.deletion.CASCADE, to='tra.featurebuild')),
                ('organization', models.ForeignKey(blank=True, help_text='Organization', on_delete=django.db.models.deletion.CASCADE, to='tra.organization')),
                ('result', models.ForeignKey(help_text='Testrun result', on_delete=django.db.models.deletion.CASCADE, to='tra.testrunresult')),
                ('test_instance', models.ForeignKey(help_text='Test instance', on_delete=django.db.models.deletion.CASCADE, to='tra.testinstance')),
                ('testline_type', models.ForeignKey(help_text='Testline configuration', on_delete=django.db.models.deletion.CASCADE, to='tra.testlinetype')),
            ],
            options={
                'ordering': ['-rp_id'],
            },
        ),
        migrations.AddField(
            model_name='testinstance',
            name='test_set',
            field=models.ForeignKey(help_text='Test set', on_delete=django.db.models.deletion.CASCADE, to='tra.testset'),
        ),
        migrations.CreateModel(
            name='RegressionFilter',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of test filter', max_length=50, null=True)),
                ('limit', models.IntegerField(default=50, help_text='Number of test runs pulled from Reporting Portal during every refresh')),
                ('fail_message_type_groups', models.ManyToManyField(blank=True, to='tra.failmessagetypegroup')),
                ('owners', models.ManyToManyField(blank=True, related_name='owned_reg_filters', to=settings.AUTH_USER_MODEL)),
                ('subscribers', models.ManyToManyField(blank=True, related_name='subscribed_reg_filters', to=settings.AUTH_USER_MODEL)),
                ('test_set', models.ForeignKey(help_text='Test set', on_delete=django.db.models.deletion.CASCADE, to='tra.testset')),
                ('testline_type', models.ForeignKey(help_text='Testline type', on_delete=django.db.models.deletion.CASCADE, to='tra.testlinetype')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddConstraint(
            model_name='testset',
            constraint=models.UniqueConstraint(fields=('name', 'test_lab_path'), name='testset_uniq'),
        ),
        migrations.AddConstraint(
            model_name='testinstance',
            constraint=models.UniqueConstraint(fields=('test_set', 'test_case_name'), name='testinstance_uniq'),
        ),
        migrations.AddConstraint(
            model_name='regressionfilter',
            constraint=models.UniqueConstraint(fields=('test_set', 'testline_type'), name='test_set_testline_hw_uniq'),
        ),
        migrations.AddConstraint(
            model_name='failmessagetypegroup',
            constraint=models.UniqueConstraint(fields=('name', 'author'), name='fmtg_name_author_uniq'),
        ),
        migrations.AddConstraint(
            model_name='failmessagetype',
            constraint=models.UniqueConstraint(fields=('regex', 'author'), name='regex_author_uniq'),
        ),
    ]
